package com.lmg.mybatis.dao;

import java.util.Properties;

import org.apache.ibatis.executor.statement.StatementHandler;
import org.apache.ibatis.plugin.Interceptor;
import org.apache.ibatis.plugin.Intercepts;
import org.apache.ibatis.plugin.Invocation;
import org.apache.ibatis.plugin.Plugin;
import org.apache.ibatis.plugin.Signature;
import org.apache.ibatis.reflection.MetaObject;
import org.apache.ibatis.reflection.SystemMetaObject;
/**
 * 完成插件签名:
 * 		告诉 MyBatis 当前插件用来拦截哪个对象的哪个方法
 * @author Administrator
 *
 */
@Intercepts(
		{
			@Signature(type=StatementHandler.class,method="parameterize",args=java.sql.Statement.class)
		}
)
public class MyFirstPlugin implements Interceptor{
	
	/**
	 * intercept: 拦截
	 * 		拦截目标对象的目标方法的执行;
	 */
	@Override
	public Object intercept(Invocation invocation) throws Throwable {
		// TODO Auto-generated method stub
		System.out.println("MyFirstPlugin...intercept:"+invocation.getMethod());
		//动态的改变一下sql运行的参数: 以前 1 号员工,实际从数据库查询11号员工
		Object target = invocation.getTarget();
		System.out.println("当前拦截到的对象:"+target);
		//拿到 StatementHandler ==> ParameterHandler ==> parameterObject
		//拿到 target 的元数据
		MetaObject metaObject = SystemMetaObject.forObject(target);
		Object value = metaObject.getValue("parameterHandler.parameterObject");
		System.out.println("sql语句的参数是:"+value);
		//修改完sql 语句要用的参数
		metaObject.setValue("parameterHandler.parameterObject", 11);
		//执行目标方法
		Object proceed = invocation.proceed();
		
		//返回执行后的返回值
		return proceed;
	}
	/**
	 * plugin
	 * 		包装目标对象的: 包装: 为目标对象创建一个代理对象
	 */
	@Override
	public Object plugin(Object target) {
		// TODO Auto-generated method stub
		//我们可以借助 Plugin 的 wrap 方法来使用当前 Interceptor 包装我们的目标对象
		System.out.println("MyFirstPlugin...plugin:mybatis将要包装的对象" +target);
		Object wrap = Plugin.wrap(target, this);
		
		//返回为当前 target创建的动态代理
		return wrap;
	}
	/**
	 * setProperties
	 * 		将插件注册时的 propety 属性设置进来
	 */
	@Override
	public void setProperties(Properties properties) {
		// TODO Auto-generated method stub
		System.out.println("插件配置的信息: " + properties);
	}

}
